{"version":3,"sources":["webpack:///./src/registerServiceWorker.js","webpack:///./src/views/about.js","webpack:///./src/commponts/Head.js","webpack:///./src/main.js","webpack:///./src/views/home.js","webpack:///./src/views/app.js"],"names":["unregister","navigator","serviceWorker","ready","then","registration","Boolean","window","location","hostname","match","_react","__webpack_require__","About","_react2","default","createElement","this","props","children","Component","Head","className","_reactRouterDom","_reactRouter","React","routes","HashRouter","Route","path","component","App","Home","ReactDOM","render","document","getElementById","_registerServiceWorker2","_Head2"],"mappings":";;;;;8JAoBe,WACT,KAyFUA,WAAT,WACD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaL,gBAvGCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB;;;;;qcChBNC,EAAAC,cAAA,sEAEMC,0MAEF,OAAOC,EAAAC,QAAAC,cAAA,mBAAWC,KAAKC,MAAMC,iBAFbC,uBAMLP;;;;;qcCRfF,EAAAC,cAAA,kEACAA,2BAAA,YACMS,0MAEF,OAAOP,EAAAC,QAAAC,cAAA,OAAKM,UAAU,UAAf,iBAFQF,uBAMJC;;;;;;;;;;wZCRfT,gCAAA,aACAA,cAAA,aACAA,kBAAA,aACAA,uBAAA,aACAA,yBAAA,aACAA,wBAAA,SAGAW,EAAAX,yBAAA,QACAY,EAAAZ,qBAAA,2DACAA,0BAAA,2MAGI,OAAOE,EAAAC,QAAAC,cAAA,iCAFkBS,UAAML,eAK7BM,EACJZ,EAAAC,QAAAC,cAACO,EAAAI,WAAD,KACEb,EAAAC,QAAAC,cAAA,WACEF,EAAAC,QAAAC,cAAA,WACEF,EAAAC,QAAAC,cAACQ,EAAAI,OAAMC,KAAK,IAAIC,UAAWC,YAC3BjB,EAAAC,QAAAC,cAACQ,EAAAI,OAAMC,KAAK,QAAQC,UAAWE,YAC/BlB,EAAAC,QAAAC,cAACQ,EAAAI,OAAMC,KAAK,SAASC,UAAWjB,eAKxCoB,UAASC,OAAOpB,EAAAC,QAAAC,cAAA,WAAMU,GAAeS,SAASC,eAAe,UAC7D,EAAAC,EAAAtB;;;;;qcC5BAJ,EAAAC,cAAA,sEAEMoB,0MAEF,OACElB,EAAAC,QAAAC,cAAA,WACEF,EAAAC,QAAAC,cAAA,0BAJWI,uBAUJY;;;;;;;;;;qcCZfrB,EAAAC,cAAA,mBACAA,6BAAA,gEACMmB,0MAEF,OACEjB,EAAAC,QAAAC,cAAA,WACGC,KAAKC,MAAMC,SACZL,EAAAC,QAAAC,cAACsB,EAAAvB,QAAD,cALUK,uBAWHW","file":"static/js/app.0a8b2.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nclass About extends Component {\r\n  render() {\r\n    return <div>about{this.props.children}</div>;\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from \"react\";\r\nimport \"../style/head.scss\";\r\nclass Head extends Component {\r\n  render() {\r\n    return <div className=\"header\">header</div>;\r\n  }\r\n}\r\n\r\nexport default Head;\r\n","import registerServiceWorker from \"./registerServiceWorker\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./views/app.js\";\r\nimport About from \"./views/about.js\";\r\nimport Home from \"./views/home.js\";\r\n// import { Router, Route, Switch, Link, IndexRoute } from \"react-router\";\r\n// import { hashHistory } from \"react-router\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { Router, Route, IndexRoute, Redirect } from \"react-router\";\r\nimport \"./style/reset.css\";\r\nclass IndexComponent extends React.Component {\r\n  render() {\r\n    return <h1>hello world!!!</h1>;\r\n  }\r\n}\r\nconst routes = (\r\n  <HashRouter>\r\n    <div>\r\n      <div>\r\n        <Route path=\"/\" component={App} />\r\n        <Route path=\"/home\" component={Home} />\r\n        <Route path=\"/about\" component={About} />\r\n      </div>\r\n    </div>\r\n  </HashRouter>\r\n);\r\nReactDOM.render(<div>{routes}</div>, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n","import React, { Component } from \"react\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span>aa</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport Head from \"../commponts/Head.js\";\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.children}\r\n        <Head />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"],"sourceRoot":""}